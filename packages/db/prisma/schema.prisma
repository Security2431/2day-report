// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // OWNER
  USER // MANAGE_WORKSPACE
  MANAGER // MANAGE_BILLING
  GUEST // VIEW_TEAMS
}

enum DayType {
  WORKING
  HOME_OFFICE
  NOT_WORKING
  HALF_DAY_VACATION
  VACATION
  SICK_DAY
  ILLNESS
  TRAVELING
}

enum TeamRole {
  FILL_WORKDAYS
  MANAGE_TEAM
  VIEW_TEAM
}

enum IntegrationProvider {
  GITHUB
  SLACK
  ACCOUNTING
  PROJECT_REPORTS
}

type WorkingHours {
  from String
  to   String
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String              @unique
  emailVerified DateTime?
  image         String?
  password      String?
  city          String?
  workingHours  WorkingHours?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  accounts      Account[]
  sessions      Session[]
  teams         TeamsMembers[]
  workspaces    WorkspacesMembers[]
  sprints       Sprint[]
  reactions     Reaction[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TeamsMembers {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  teamId      String     @db.ObjectId
  permissions TeamRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  team        Team       @relation(fields: [teamId], references: [id])
}

model Team {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId   String         @db.ObjectId
  invitationIDs String[]       @db.ObjectId
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         TeamsMembers[]
  workspace     Workspace      @relation(fields: [workspaceId], references: [id])
  invitations   Invitation[]   @relation(fields: [invitationIDs], references: [id])
}

// Many to many relations https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#mongodb
model WorkspacesMembers {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  workspaceId String    @db.ObjectId
  permissions Role[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Workspace {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  country      String?
  image        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  teams        Team[]
  projects     Project[]
  integrations Integration[]
  users        WorkspacesMembers[]
  invitations  Invitation[]
  sprints      Sprint[]
}

model Invitation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId String    @db.ObjectId
  teamIDs     String[]  @db.ObjectId
  email       String?
  hash        String?
  permissions Role[]
  assignedBy  String
  assignedAt  DateTime  @default(now())
  teams       Team[]    @relation(fields: [teamIDs], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Integration {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId    String              @db.ObjectId
  status         Boolean             @default(false)
  provider       IntegrationProvider
  review_access  String
  refresh_access String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  workspace      Workspace           @relation(fields: [workspaceId], references: [id])
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId String    @db.ObjectId
  name        String
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reports     Report[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Sprint {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId          String     @db.ObjectId
  userId               String     @db.ObjectId
  date                 DateTime
  type                 DayType
  tomorrowsDescription String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  reports              Report[]
  reactions            Reaction[]
  workspace            Workspace  @relation(fields: [workspaceId], references: [id])
  user                 User       @relation(fields: [userId], references: [id])
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sprintId    String   @db.ObjectId
  projectId   String   @db.ObjectId
  description String?
  hours       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  sprint      Sprint   @relation(fields: [sprintId], references: [id])
}

model Reaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  sprintId  String   @db.ObjectId
  unified   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  sprint    Sprint   @relation(fields: [sprintId], references: [id])
}
